[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "NLP Tokenisation Visualiser App\n\n\nTokenisation is a foundational step in NLP but often overlooked. Modify text and tokeniser to see how the algorithms work in real time.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tidyverse-dplyr-tidyr/index.html",
    "href": "posts/tidyverse-dplyr-tidyr/index.html",
    "title": "Tidyverse Essentials (dplyr & tidyr)",
    "section": "",
    "text": "Tidyverse is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nInstallation This can be done using install.packages(\"tidyverse\"); library(tidyverse) to install and import all packages.\n\n\n\n\n\n\nTip\n\n\n\nInstalling tidyverse will result in (usually) a lot of libraries your code isn’t using being installed, which is not efficient. It is best practice (and helps your learning) to install packages individually. See below for popular tidyverse packages.\n\n\n\n\n\ndplyr - Solve the most common data manipulation challenges (NB dbplyr allows you to use remote database tables by converting dplyr code to SQL)\nreadr - Read and write tabular data like csv and tsv formats. (NB there are options like readxl, writexl for working with excel files and googlesheets4 for Google sheets)\nstringr - Set of functions designed to make working with strings as easy as possible. It also incorporates Reg Ex patterns into its syntax. Many common data cleaning and preparation tasks involve string cleaning such as detecting matches, sub-setting strings, mutating strings, ordering, …\ntidyr - A set of functions to help tidy data (each column is a row, each row an observation, and each cell a single value). separate_wider_delim(), hoist(), pivot_longer(), …\nggplot2 - A declarative package for making graphics. See also R Graphics Cookbook\npurrr - Provides a complete set of tools for working with functions and vectors. (The map() family can efficiently replace for loops). A good place to start learning is here.\n\nNote There are more packages than this including some helpful ones: httr, lubridate, glue, modelr, forcats."
  },
  {
    "objectID": "posts/tidyverse-dplyr-tidyr/index.html#introduction",
    "href": "posts/tidyverse-dplyr-tidyr/index.html#introduction",
    "title": "Tidyverse Essentials (dplyr & tidyr)",
    "section": "",
    "text": "Tidyverse is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nInstallation This can be done using install.packages(\"tidyverse\"); library(tidyverse) to install and import all packages.\n\n\n\n\n\n\nTip\n\n\n\nInstalling tidyverse will result in (usually) a lot of libraries your code isn’t using being installed, which is not efficient. It is best practice (and helps your learning) to install packages individually. See below for popular tidyverse packages.\n\n\n\n\n\ndplyr - Solve the most common data manipulation challenges (NB dbplyr allows you to use remote database tables by converting dplyr code to SQL)\nreadr - Read and write tabular data like csv and tsv formats. (NB there are options like readxl, writexl for working with excel files and googlesheets4 for Google sheets)\nstringr - Set of functions designed to make working with strings as easy as possible. It also incorporates Reg Ex patterns into its syntax. Many common data cleaning and preparation tasks involve string cleaning such as detecting matches, sub-setting strings, mutating strings, ordering, …\ntidyr - A set of functions to help tidy data (each column is a row, each row an observation, and each cell a single value). separate_wider_delim(), hoist(), pivot_longer(), …\nggplot2 - A declarative package for making graphics. See also R Graphics Cookbook\npurrr - Provides a complete set of tools for working with functions and vectors. (The map() family can efficiently replace for loops). A good place to start learning is here.\n\nNote There are more packages than this including some helpful ones: httr, lubridate, glue, modelr, forcats."
  },
  {
    "objectID": "posts/tidyverse-dplyr-tidyr/index.html#installing-importing-packages",
    "href": "posts/tidyverse-dplyr-tidyr/index.html#installing-importing-packages",
    "title": "Tidyverse Essentials (dplyr & tidyr)",
    "section": "Installing & importing packages",
    "text": "Installing & importing packages\n\n# installing\ninstall.packages(\"tidyverse\")\n# or install specific packages\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n\n# now import them into your session\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "posts/tidyverse-dplyr-tidyr/index.html#inspecting-a-dataset",
    "href": "posts/tidyverse-dplyr-tidyr/index.html#inspecting-a-dataset",
    "title": "Tidyverse Essentials (dplyr & tidyr)",
    "section": "Inspecting a dataset",
    "text": "Inspecting a dataset\nSome packages come with dataset you can work with, or you can inspect your own data\n\n# open ggplot2's data dictionary for this packages internal dataset\nhelp(\"mpg\")\n# load the dataset into a variable\ndf &lt;- mpg\n# see information rich summary\nglimpse(df)\n# see top n rows\n1df %&gt;% head(n=5)\n\n\n1\n\nYou can also use tail() to see the bottom n rows"
  },
  {
    "objectID": "posts/tidyverse-dplyr-tidyr/index.html#dplyr",
    "href": "posts/tidyverse-dplyr-tidyr/index.html#dplyr",
    "title": "Tidyverse Essentials (dplyr & tidyr)",
    "section": "dplyr",
    "text": "dplyr\n\nselect() & rename()\nselect([df], helper_function([col_1], [col_2]))\nYou can wrap the columns in helper functions:\n\ncontains(match, ignore.case = T) - column name contains a certain string\nstarts_with(match, ignore.case = T) - column names start with\nends_with(match, ignore.case = T) - column names end with\nmatches(match, ignore.case = T) - matches a regular expression\nnum_range(prefix, range, ...) - names following the pattern e.g. num_range(\"Wk\", 1:3): “Wk1”, “Wk2”, “Wk3”\nany_of() - will select all columns available from a list\nall_of() - used for strict selection. Throws an error if one of the columns named in the list aren’t present in the dataframe\nmatches() - exactly matches a certain string\nwhere(is.numeric()) - will select all numeric columns (int or dbl). Also is.character, is.factor, is.integer, is.double\n\nrename([new_name] = [old_name])\n\n# selecting column by index (position)\n\n# select columns in position 1-3\nselect(df, 1:3)\n# select columns in position 1-3\nselect(df, c(2, 5, 7))\n# select from the second to last column to the last column\nselect(df, (ncol(df) -2) : ncol(df))\n\n# selecting columns that contain 'l' (upper or lower case) \n# and renaming 'model' to 'type' etc.\ndf %&gt;% \n  select(contains('l', ignore.case = TRUE)) %&gt;% \n  rename(type = model, cylinder = cyl)\n\n# select and rename in one call\nselect(df, \n1       mnfc = manufacturer,\n       mod = model,\n2       everything())\n\n# select all numeric columns plus some extras\nmpg %&gt;%\n3  select(where(is.numeric),\n4         mnfc = manufacturer,\n         mod = model)\n\n# another approach: create a vector and use this with any_of()\nnumerical_cols &lt;- c('displ', 'year', 'cyl', 'cty', 'hwy')\nnumerical_df &lt;- df %&gt;% \n  select(any_of(numerical_cols))\n\n# negative selections\ndf %&gt;% \n5  select(-any_of(c(model, displ, cyl)))\n\n\n1\n\nselect and rename in one call\n\n2\n\nselect all remaining columns that haven’t already been specified\n\n3\n\nthis will select all column of data type int or dbl\n\n4\n\nadd tow additional non-numeric cols to your selection\n\n5\n\nremove any of these columns that appear in the dataframe"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "You have found my personal data science focused learning blog. I post content I find useful to reinforce my learning and refer back to. You might find it useful as well. Search the filter bar or select a category.\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nTidyverse Essentials (dplyr & tidyr)\n\n\nThe grammar of data wrangling\n\n\n\ntutorial\n\n\nr\n\n\ntidyverse\n\n\ndplyr\n\n\ntidyr\n\n\n\nManipulating data is very important. R has a suite of packages to help you out\n\n\n\n\n\n24 July 2024\n\n\nMatthew Scott\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Demo\n\n\nA how-to of syntax\n\n\n\ntutorial\n\n\nquarto\n\n\nr\n\n\n\nThe art of the possible\n\n\n\n\n\n19 July 2024\n\n\nMatthew Scott\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Matthew Scott",
    "section": "",
    "text": "Apprentice Data Scientist at The Pensions Regulator | Resume"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "© Copyright Matthew Scott\nThis is my personal website. Nothing here is endorsed by my employer or any organizations of which I am a part. Content on this site is provided under a Creative Commons (CC-BY) 4.0 license. You may reuse this content as long as you indicate my authorship and provide a link back to the original material. Source code of the site is provided under the MIT license and may be reused without restriction.\nAll images created using Procreate unless otherwise specified."
  },
  {
    "objectID": "posts/quarto-tutorial/index.html",
    "href": "posts/quarto-tutorial/index.html",
    "title": "Quarto Demo",
    "section": "",
    "text": "Abstract River\nClick the code tools icon in the banner to see all Quarto code used in this article: &lt;/&gt; Code\nAn example sentence - info\nAn example sentence - success\nAn example sentence - warning\nAn example sentence - danger\nThis is a demo using panels and code chunks:"
  },
  {
    "objectID": "posts/quarto-tutorial/index.html#link-icons",
    "href": "posts/quarto-tutorial/index.html#link-icons",
    "title": "Quarto Demo",
    "section": "Link icons",
    "text": "Link icons\nOther link icons you can generate using header yaml include, info-circle, download, book, postcard, rss. We already use the github and linkedin link icons in about.qmd.\nSee the info yaml in the Ibis Quarto website for examples."
  },
  {
    "objectID": "posts/quarto-tutorial/index.html#fenced-divs",
    "href": "posts/quarto-tutorial/index.html#fenced-divs",
    "title": "Quarto Demo",
    "section": "Fenced divs",
    "text": "Fenced divs\nYou can add classes, attributes, and other identifiers to regions of content using divs and spans:\n\nBorders\n\nThis content can be styled with a border\n\n\n\nCallout notes\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nTip with caption\n\n\n\nLeave a tip in a caption box like this!\n\n\n\n\n\n\n\n\nWarning without icon\n\n\n\n\n\nThis one is collapsed and has no icon\n\n\n\n\n\n\n\n\n\nImportant with custom caption\n\n\n\nA simplified callout note"
  },
  {
    "objectID": "posts/quarto-tutorial/index.html#in-the-margin",
    "href": "posts/quarto-tutorial/index.html#in-the-margin",
    "title": "Quarto Demo",
    "section": "In the margin",
    "text": "In the margin\nLook right\n\n\nCheck out this YouTube playlist with great talks on blogging!"
  },
  {
    "objectID": "posts/quarto-tutorial/index.html#linking-internally",
    "href": "posts/quarto-tutorial/index.html#linking-internally",
    "title": "Quarto Demo",
    "section": "Linking internally",
    "text": "Linking internally\nQuite easy, just specify the relative folder path to get there from here: ../../about.qmd"
  },
  {
    "objectID": "posts/quarto-tutorial/index.html#embed-content-as-html",
    "href": "posts/quarto-tutorial/index.html#embed-content-as-html",
    "title": "Quarto Demo",
    "section": "Embed content as HTML",
    "text": "Embed content as HTML"
  },
  {
    "objectID": "projects/nlp-token-visualiser/index.html",
    "href": "projects/nlp-token-visualiser/index.html",
    "title": "NLP Tokenisation Visualiser App",
    "section": "",
    "text": "Details\n\n\n\n\n\nTitle\nLearn Natural Language Processing Concepts\n\n\nHost\nStreamlit Community Cloud\n\n\nRepo\nMy University GitHub account\n\n\nURL\nApp\n\n\nNotes\nIf the app has been dormant, it may take up to 5 mins to boot up. It’s a free hosting service after all"
  }
]