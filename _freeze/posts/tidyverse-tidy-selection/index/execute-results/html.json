{
  "hash": "befa188aede999ee0f2e59a41f83327a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy selection\"\nsubtitle: \"A powerful tool when working with columns\"\nauthor: \"Matthew Scott\"\ndate: \"2024-08-10\"\ndescription: \"Make programming with the tidyverse easier\"\ncategories: [r, tidyverse, dplyr]\nimage: \"maroon-ribbon.png\"\nimage-alt: \"An abstract maroon ribbon snakes across a patterned background\"\ncode-annotations: hover\ntoc: true\ndraft: false\nexecute: \n  eval: true\n---\n\n\n![Maroon ribbon](maroon-ribbon-cropped.png){fig-alt=\"A maroon ribbon snakes across the page\"}\n\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nTidy selection is a principle that makes it easier to work with columns in a  dataset. Behind the principle is the `tidyselect` package. This package is used by `dplyr` and `tidyr` and means you don't have to use an exact column name to select it, you can use it's [**name**, **position**]{.text-info} or [**type**]{.text-info}.\n\nTidy select can be used with `select()`, `rename()`, `relocate()`, `across()`, `pull()`, `where()`, `any_of()`, and `all_of()` in the dplyr package.\n\nWhat does this mean for your programming?\n\nLet's use the `starwars` dataset for these examples. Expand the info box below to see the dataset:\n\n:::{.callout-note icon=\"true\" collapse=\"true\"}\n## Starwars dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      <list> <\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp…\n$ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",…\n```\n\n\n:::\n:::\n\n:::\n\n## Selecting by name\n\n### This can be done with the exact col name:\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% select(name, height, mass) %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name           height  mass\n  <chr>           <int> <dbl>\n1 Luke Skywalker    172    77\n2 C-3PO             167    75\n3 R2-D2              96    32\n```\n\n\n:::\n:::\n\n\n### Or inexactly with the use of helper functions:\n::: panel-tabset\n## `starts_with()`\nThe column start with character(s)\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(starts_with(\"S\", ignore.case = T)) %>% \n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  skin_color  sex   species starships\n  <chr>       <chr> <chr>   <list>   \n1 fair        male  Human   <chr [2]>\n2 gold        none  Droid   <chr [0]>\n3 white, blue none  Droid   <chr [0]>\n```\n\n\n:::\n:::\n\n## `ends_with()`\nEnds with an exact suffix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% select(ends_with(\"s\")) %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n   mass species films     vehicles  starships\n  <dbl> <chr>   <list>    <list>    <list>   \n1    77 Human   <chr [5]> <chr [2]> <chr [2]>\n2    75 Droid   <chr [6]> <chr [0]> <chr [0]>\n3    32 Droid   <chr [7]> <chr [0]> <chr [0]>\n```\n\n\n:::\n:::\n\n\n## `contains()`\nContains a literal string\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% select(contains(\"color\")) %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  hair_color skin_color  eye_color\n  <chr>      <chr>       <chr>    \n1 blond      fair        blue     \n2 <NA>       gold        yellow   \n3 <NA>       white, blue red      \n```\n\n\n:::\n:::\n\n\n## `matches()`\nMatches a regular expression or a `stringr()` pattern\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(matches(\"[s]{2}\")) %>% # <1>\n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n   mass\n  <dbl>\n1    77\n2    75\n3    32\n```\n\n\n:::\n:::\n\n1. will match where 's' appears twice in a row\n:::\n\n## Use of boolean operators\n\nTidy selection allows you to use Boolean operators (`&`, `|`) to specify columns as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(ends_with(\"color\") & \n           !starts_with(\"h\")) %>% # <1>\n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  skin_color  eye_color\n  <chr>       <chr>    \n1 fair        blue     \n2 gold        yellow   \n3 white, blue red      \n```\n\n\n:::\n:::\n\n1. use of `!` as 'not'. Columns that end_with 'color' and don't start with 'h'\n\n## Position\nYou don't have to use name, you can use the position of the column in the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(1, 3, 4:7) %>% # <1>\n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  name            mass hair_color skin_color  eye_color birth_year\n  <chr>          <dbl> <chr>      <chr>       <chr>          <dbl>\n1 Luke Skywalker    77 blond      fair        blue              19\n2 C-3PO             75 <NA>       gold        yellow           112\n3 R2-D2             32 <NA>       white, blue red               33\n```\n\n\n:::\n:::\n\n1. select the first, third, and cols 4, 5, 6, 7\n\nYou can also use `last_col()` which will automatically find the last column in the dataframe. (This saves you having to work out the length of the dataframe):\n\n::: {.cell}\n\n```{.r .cell-code}\n# this:\nstarwars %>% select(1, length(starwars))\n\n# is the same as this:\nstarwars %>% select(1, last_col())\n```\n:::\n\n\n## Type\nTidyselect means you can specify columns based on their datatype as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(name, where(is.list)) %>% # <1>\n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  name           films     vehicles  starships\n  <chr>          <list>    <list>    <list>   \n1 Luke Skywalker <chr [5]> <chr [2]> <chr [2]>\n2 C-3PO          <chr [6]> <chr [0]> <chr [0]>\n3 R2-D2          <chr [7]> <chr [0]> <chr [0]>\n```\n\n\n:::\n:::\n\n1. Use `where()` to make it more explicit what you're selecting (although not mandatory)\n\nIn this case we can use the columns data type to ensure every numeric column is a double (maybe we need this for machine learning purposes):\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n    select(name, where(is.numeric)) %>% \n    mutate_if(is.integer, as.double) %>%  # <1>\n    head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  name           height  mass birth_year\n  <chr>           <dbl> <dbl>      <dbl>\n1 Luke Skywalker    172    77         19\n2 C-3PO             167    75        112\n3 R2-D2              96    32         33\n```\n\n\n:::\n:::\n\n1. If we have any integer columns slected by `is.numeric`, ensure they are mutated to doubles with `as.double`\n\n## Using environment variables or function variables with tidyverse\nThis is related to the data masking property that tidy evaluation employs, rather than its tidy select properties, but it still useful to know when extending tidy selection.\n\n### With environment variables\nIn order to use a variable specified in the global environment (these are the variables you've assigned earlier in your script), you need to add the `!!` or `.env$` syntax around the variable to tell tidyselect to look outside of the dataframe variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncols <- c(\"homeworld\", \"sex\", \"eye_color\")\n\nstarwars %>% select(!!cols) %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  homeworld sex   eye_color\n  <chr>     <chr> <chr>    \n1 Tatooine  male  blue     \n2 Tatooine  none  yellow   \n3 Naboo     none  red      \n```\n\n\n:::\n:::\n\n\n### In functions\nYou need to 'embrace' (`{{{ var }}}`) your tidyselect syntax when it is provided as an argument to a function:\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Select all characters that appear on the\n#' given homeworld and supply their numeric\n#' stats.\n#' Only return rows where all numeric columns \n#' aren't NA.\nstarwars_toptrumps <- function(df = starwars, homeworld){\n    df %>% \n        select(name, homeworld, where(is.numeric)) %>% \n        filter(homeworld == {{ homeworld }}) %>% # <1>\n        tidyr::drop_na(where(is.numeric)) # <2>\n}\n\nstarwars_toptrumps(homeworld = \"Naboo\") # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  name          homeworld height  mass birth_year\n  <chr>         <chr>      <int> <dbl>      <dbl>\n1 R2-D2         Naboo         96    32         33\n2 Palpatine     Naboo        170    75         82\n3 Padmé Amidala Naboo        185    45         46\n4 Jar Jar Binks Naboo        196    66         52\n```\n\n\n:::\n:::\n\n1. Specify the use of a function argument in filter\n2. Use tidyr function to check all numeric columns and only return rows that don't include NA using `drop_na()`\n3. Call function and feed a 'homeworld' into the filter argument of the function\n\n## References\n\n1. [Programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html)\n2. [Technical description of tidyselect](https://tidyselect.r-lib.org/articles/syntax.html)\n3. [Argument type: data masking](https://tidyselect.r-lib.org/articles/syntax.html)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}