{
  "hash": "59a94a5af9dfb4336eb0ddee8961bb4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidyverse Essentials - `dplyr`\"\nsubtitle: \"The grammar of data wrangling\"\nauthor: \"Matthew Scott\"\ndate: \"2024-07-24\"\ndescription: \"Data wrangling: solve the most common data manipulation challenges\"\ncategories: [tutorial, r, tidyverse, dplyr]\nimage: \"abstract-art.png\"\nimage-alt: \"An abstract sketch using broad brush strokes\"\ncode-annotations: hover\ndraft: false\ntoc: true\n---\n\n\n![Abstract Canvas](abstract-art-wide.png){fig-alt=\"A picture I drew one time\"}\n\n::: {.cell}\n\n:::\n\n\n\n## Introduction\n\nTidyverse is a collection of [R packages](https://www.tidyverse.org/packages/) designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n**Installation** This can be done using `install.packages(\"tidyverse\")`; `library(tidyverse)` to install and import all packages.\n\n:::{.callout-tip appearance=\"simple\" icon=\"true\"}\n## Tip \nInstalling tidyverse will result in (usually) a lot of libraries your code isn't using being installed, which is not efficient. It is best practice (and helps your learning) to install packages individually. See below for popular tidyverse packages.\n:::\n\n### Popular Tidyverse packages\n\n* [`dplyr`](https://dplyr.tidyverse.org/) - Solve the most common data manipulation challenges (**NB** `dbplyr` allows you to use remote database tables by converting dplyr code to SQL)\n* [`readr`](https://readr.tidyverse.org/) - Read and write tabular data like csv and tsv formats. (NB there are options like `readxl`, `writexl` for working with excel files and `googlesheets4` for Google sheets)\n* [`stringr`](https://stringr.tidyverse.org/) - Set of functions designed to make working with strings as easy as possible. It also incorporates Reg Ex patterns into its syntax. Many common data cleaning and preparation tasks involve string cleaning such as detecting matches, sub-setting strings, mutating strings, ordering, ...\n* [`tidyr`](https://tidyr.tidyverse.org/) - A set of functions to help tidy data (each column is a row, each row an observation, and each cell a single value). `separate_wider_delim()`, `hoist()`, `pivot_longer()`, ...\n* [`ggplot2`](https://ggplot2.tidyverse.org/) - A declarative package for making graphics. See also [R Graphics Cookbook](https://r-graphics.org/)\n* [`purrr`](https://purrr.tidyverse.org/) - Provides a complete set of tools for working with functions and vectors. (The `map()` family can efficiently replace for loops). A good place to start learning is [here](https://r4ds.had.co.nz/iteration.html).\n\n**Note** There are more packages than this including some helpful ones: `httr`, `lubridate`, `glue`, `modelr`, `forcats`.\n\n## Installing & importing packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# installing\ninstall.packages(\"tidyverse\")\n# or install specific packages\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n\n# now import them into your session\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n## Inspecting a dataset\n\nSome packages come with dataset you can work with, or you can inspect your own data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# open ggplot2's data dictionary for this packages internal dataset\nhelp(\"mpg\")\n# load the dataset into a variable\ndf <- mpg\n# see information rich summary\nglimpse(df)\n# see top n rows\ndf %>% head(n=5) # <1>\n```\n:::\n\n1. You can also use `tail()` to see the bottom n rows\n\n## `select()` & `rename()`\n\n`select([df], helper_function([col_1], [col_2]))`\n\nYou can wrap the columns in helper functions:\n\n* `contains(match, ignore.case = T)` - column name contains a certain string\n* `starts_with(match, ignore.case = T)` - column names start with\n* `ends_with(match, ignore.case = T)` - column names end with\n* `matches(match, ignore.case = T)` - matches a regular expression\n* `num_range(prefix, range, ...)` - names following the pattern e.g. `num_range(\"Wk\", 1:3)`: \"Wk1\", \"Wk2\", \"Wk3\"\n* `any_of()` - will select all columns available from a list\n* `all_of()` - used for strict selection. Throws an error if one of the columns named in the list aren't present in the dataframe\n* `matches()` - exactly matches a certain string\n* `where(is.numeric())` - will select all numeric columns (int or dbl). Also `is.character`, `is.factor`, `is.integer`, `is.double`\n\n`rename([new_name] = [old_name])`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# selecting column by index (position)\n\n# select columns in position 1-3\nselect(df, 1:3)\n# select columns in position 1-3\nselect(df, c(2, 5, 7))\n# select from the second to last column to the last column\nselect(df, (ncol(df) -2) : ncol(df))\n\n# selecting columns that contain 'l' (upper or lower case) \n# and renaming 'model' to 'type' etc.\ndf %>% \n  select(contains('l', ignore.case = T)) %>% \n  rename(type = model, cylinder = cyl)\n\n# select and rename in one call\nselect(df, \n       mnfc = manufacturer, # <1>\n       mod = model, # <1>\n       everything()) # <2>\n\n# select all numeric columns plus some extras\nmpg %>%\n  select(where(is.numeric), # <3>\n         mnfc = manufacturer, # <4>\n         mod = model) # <4>\n\n# another approach: create a vector and use this with any_of()\nnumerical_cols <- c('displ', 'year', 'cyl', 'cty', 'hwy')\nnumerical_df <- df %>% \n  select(any_of(numerical_cols))\n\n# negative selections\ndf %>% \n  select(-any_of(c(model, displ, cyl))) # <5>\n```\n:::\n\n\n1. select and rename in one call\n2. select all remaining columns that haven't already been specified\n3. this will select all column of data type int or dbl\n4. add two additional non-numeric cols to your selection\n5. remove any of these columns that appear in the dataframe\n\n## `mutate()` & `transmute()`\n\n`mutate([new_col] = [old_col(s) + logic])`\n\n* creates a new column based on the logic provided\n* you can create multiple columns at one time\n* adds the new col to the df\n\n`transmute([new_col] = [old_col(s) + logic])`\n\n* creates a new column and drops other columns (this can be useful when do machine learning and you don't want the new columns interfering with the model)\n\nHelpful functions for dealing with strings:\n\n| Functions | \n|:------:|\n| `as.character()` | \n| `as.date()` | \n| `as.integer()` | \n\n: {.striped .hover}\n\n**Note** There is also `lubridate` and `hms` packages for working with dates and times that give a lot more flexibility. `stringr` is another useful package commonly used wiht mutate to extract parts of columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create 'avg mpg' column and paste together two cols into 'car'\n# this will return the full df plus these two new cols\nmpg %>% \n    mutate(\n         car = paste(manufacturer, model, sep = ' '),\n        `avg mpg` = (( cty + hwy ) / 2 ),\n         cty, # <1>\n        .keep = \"none\") %>%  # <2>\n    head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n    cty car     `avg mpg`\n  <int> <chr>       <dbl>\n1    18 audi a4      23.5\n2    21 audi a4      25  \n3    20 audi a4      25.5\n4    21 audi a4      25.5\n5    16 audi a4      21  \n```\n\n\n:::\n:::\n\n1. We can specify the col name with no calc and it will get included\n2. Acts like `transmute` to keep only created columns\n\nUse `.by` to group our selection in a single expression. We return the max avg mpg for each model type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n    mutate(`avg mpg` = ((cty+hwy)/2),\n           `max avg mpg` = max(`avg mpg`),\n           .by = model,\n           .keep = \"used\") # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 5\n   model        cty   hwy `avg mpg` `max avg mpg`\n   <chr>      <int> <int>     <dbl>         <dbl>\n 1 a4            18    29      23.5          25.5\n 2 a4            21    29      25            25.5\n 3 a4            20    31      25.5          25.5\n 4 a4            21    30      25.5          25.5\n 5 a4            16    26      21            25.5\n 6 a4            18    26      22            25.5\n 7 a4            18    27      22.5          25.5\n 8 a4 quattro    18    26      22            24  \n 9 a4 quattro    16    25      20.5          24  \n10 a4 quattro    20    28      24            24  \n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n1. Now we keep only columns used in our mutate verb, including those used in the calculations.\n\n### Common usage\n\nReplace existing columns with mutated version of themselves, either by converting the data type or cleaning the column of NAs. Create new columns with mutate.\n\n- `case_when()`\n- `case_match()`\n- `if_else()`\n- `na_if()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutate with case_when\nmpg %>% \n    mutate(\n        \"hwy_bins\" = case_when(\n            hwy < 20 ~ \"low\",\n            between(hwy, 20, 30) ~ \"medium\",\n            hwy > 30 ~ \"high\",\n            TRUE ~ NA_character_\n            ))\n\n# mutate with if_else\nmpg %>% \n    mutate(\n        \"is_offroad\" = if_else(\n            drv == \"4\", \"Y\", \"N\"\n        ))\n\n# mutate with na_if() to replace values with NA\nmpg %>% \n    mutate(year = na_if(year, NaN)) # <1>\n```\n:::\n\n1. if NaN present, replace it with NA to help clean the column\n\n\n### Other mutate verbs\n\n* `mutate_all()` - affects every variable\n* `mutate_if()` - affects variables selected with a predicate function\n* `mutate_at()` - affects variables selected with a character variable or vars()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code:\ntable_sep <- table %>%\n  separate(col = date,\n           into = c(\"year\", \"month\", \"dayofmonth\"),\n           sep = \"-\") %>%\n  mutate(month = as.numeric(month), # <1>\n         dayofmonth = as.numeric(dayofmonth)) %>% # <1>\n  arrange(year, month, dayofmonth)\n\n# is the same as this:\ntable_sep <- table %>%\n  separate(col = date,\n           into = c(\"year\", \"month\", \"dayofmonth\"),\n           sep = \"-\") %>%\n  mutate_at(.vars = c(\"month\", \"dayofmonth\"), # <2>\n            .funs = as.numeric) # <2>\n  arrange(year, month, dayofmonth)\n```\n:::\n\n1. Where we have to specify every column to change data type here...\n2. ...we can supply the columns in a list and only have to specify the mutate function once\n\nYou can imagine if we had lots of columns to mutate, this would be much more succinct.\n\n:::{.callout-note appearance=\"simple\" icon=\"true\"}\n## Note \nIt is generally preferred to use `across()` instead of the above verbs. See [Column-wise operations](https://dplyr.tidyverse.org/articles/colwise.html) for a detailed explanation of this.\n:::\n\nYou can mutate any column that is.character/is.numeric...:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n    mutate_if(is.character, stringr::str_to_title) %>% # <1>\n    select(is.character) %>% \n    head(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  manufacturer model trans      drv   fl    class  \n  <chr>        <chr> <chr>      <chr> <chr> <chr>  \n1 Audi         A4    Auto(L5)   F     P     Compact\n2 Audi         A4    Manual(M5) F     P     Compact\n3 Audi         A4    Manual(M6) F     P     Compact\n4 Audi         A4    Auto(Av)   F     P     Compact\n```\n\n\n:::\n:::\n\n1. convert all character columns to title case (upper case at start of each word)\n\n### `across()`\n\n`across` works very well with `summarise()` & `mutate()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n    summarise(across(where(is.character), n_distinct)) # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  manufacturer model trans   drv    fl class\n         <int> <int> <int> <int> <int> <int>\n1           15    38    10     3     5     7\n```\n\n\n:::\n:::\n\n1. `across()` is used to apply the summary, `n_distint()`, across the selected columns - in this case all character columns\n\n## `filter()` & `slice()`\n\n### `filter()` \nUsed to extract or create a subset of rows based on logical operators\n- it will produce a new table\n\nLogical operators to use with `filter()`:\n\n| Operator | Meaning\n|:----:| :----:\n| `==` | equal to\n| `!=` | not equal to\n| `<` | less than\n| `>` | greater than\n| `<=` | less than or equal to\n| `>=` | greater than or equal to\n| `!` | not\n| `is.na()` | is NA\n| `!is.na()` | is not NA\n| `%in%` | is in (a vector)\n| `|` | or\n| `&` | and\n| `xor()` | exclusive or - 'one or the other but not both'\n\n: {.striped .hover}\n\nfiltering a table:\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- 1999\n\n# this is the same as '&'\nmpg %>% \n    filter(manufacturer == \"audi\",\n           year == 1999) %>%  # <1>\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  manufacturer model      displ  year   cyl trans  drv     cty   hwy fl    class\n  <chr>        <chr>      <dbl> <int> <int> <chr>  <chr> <int> <int> <chr> <chr>\n1 audi         a4           1.8  1999     4 auto(… f        18    29 p     comp…\n2 audi         a4           1.8  1999     4 manua… f        21    29 p     comp…\n3 audi         a4           2.8  1999     6 auto(… f        16    26 p     comp…\n4 audi         a4           2.8  1999     6 manua… f        18    26 p     comp…\n5 audi         a4 quattro   1.8  1999     4 manua… 4        18    26 p     comp…\n6 audi         a4 quattro   1.8  1999     4 auto(… 4        16    25 p     comp…\n```\n\n\n:::\n:::\n\n1. notice we can also reference variables\n\n### `slice()` \nUsed to select certain rows of the table based on row position\n\nRelated slice functions:\n- `slice_head()`\n- `slice_tail()`\n- `slice_sample()`\n- `slice_max()`\n- `slice_min()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select rows 10-20\nslice(df, 10:20)\n\n# slice top 10 rows\nslice_head(df, n = 10)\n\n# select bottom rows\nslice_tail(df, prop = .1) # <1>\n\n# select 10 rows at random from df\nslice_sample(df, 10)\n# select rows at random based on proportion of df\nslice_sample(df, prop = .1)\n\ndf %>% slice_max(hwy, n = 10) # <2>\ndf %>% slice_min(hwy, prop = .1) # <2>\n```\n:::\n\n1. select the bottom 10% of the df\n2. order by the selected column and select the top/bottom rows\n\n:::{.callout-note appearance=\"simple\" icon=\"true\"}\n## `slice_sample()` Note \nslice-sample can be done in two main ways, by taking the sampled rows 'out' of the data frame (so when subsequent sample slices are made, they cannot be chosen again), or by 'replacing' the sample (so in subsequent sample slices the same rows can be chosen again).\n\nThis is done using the `replace =` argument:\n\n- `df %>% slice_sample(prop = .1, replace = True)`\n- `df %>% slice_sample(prop = .1, replace = False)`\n\n`replace = False` is the default.\n:::\n\n- You can set a seed for reproducibility. Using the same seed will yield the same random selection each time, useful for code reviews where your results need to be reproduced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(200)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}